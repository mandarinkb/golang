package main

import (
	"context"
	"fmt"
	"log"
	"mandarinkb/go-temporal/workflows"

	"go.temporal.io/sdk/client"
)

func main() {
	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Temporal Client
	c, err := client.Dial(client.Options{})
	if err != nil {
		log.Fatalf("‚ùå Failed to create Temporal client: %v", err)
	}
	defer c.Close()

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Workflow Options
	options := client.StartWorkflowOptions{
		ID:        "dynamic-job-workflow",
		TaskQueue: "job-task-queue",
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Dynamic Workflow ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	we, err := c.ExecuteWorkflow(context.Background(), options, workflows.DynamicJobWorkflow, 5)
	if err != nil {
		log.Fatalf("‚ùå Failed to start workflow: %v", err)
	}

	fmt.Printf("‚úÖ Started Dynamic Workflow: %s\n", we.GetID())

	// ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á Workflow
	var results []string
	err = we.Get(context.Background(), &results)
	if err != nil {
		log.Fatalf("‚ùå Workflow failed: %v", err)
	}

	// ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	fmt.Println("üéâ Workflow results:", results)
}
